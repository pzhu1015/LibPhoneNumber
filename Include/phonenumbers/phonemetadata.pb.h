// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phonemetadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_phonemetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_phonemetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_phonemetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_phonemetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace i18n {
namespace phonenumbers {
class NumberFormat;
struct NumberFormatDefaultTypeInternal;
extern NumberFormatDefaultTypeInternal _NumberFormat_default_instance_;
class PhoneMetadata;
struct PhoneMetadataDefaultTypeInternal;
extern PhoneMetadataDefaultTypeInternal _PhoneMetadata_default_instance_;
class PhoneMetadataCollection;
struct PhoneMetadataCollectionDefaultTypeInternal;
extern PhoneMetadataCollectionDefaultTypeInternal _PhoneMetadataCollection_default_instance_;
class PhoneNumberDesc;
struct PhoneNumberDescDefaultTypeInternal;
extern PhoneNumberDescDefaultTypeInternal _PhoneNumberDesc_default_instance_;
}  // namespace phonenumbers
}  // namespace i18n
PROTOBUF_NAMESPACE_OPEN
template<> ::i18n::phonenumbers::NumberFormat* Arena::CreateMaybeMessage<::i18n::phonenumbers::NumberFormat>(Arena*);
template<> ::i18n::phonenumbers::PhoneMetadata* Arena::CreateMaybeMessage<::i18n::phonenumbers::PhoneMetadata>(Arena*);
template<> ::i18n::phonenumbers::PhoneMetadataCollection* Arena::CreateMaybeMessage<::i18n::phonenumbers::PhoneMetadataCollection>(Arena*);
template<> ::i18n::phonenumbers::PhoneNumberDesc* Arena::CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace i18n {
namespace phonenumbers {

// ===================================================================

class NumberFormat final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.NumberFormat) */ {
 public:
  inline NumberFormat() : NumberFormat(nullptr) {}
  ~NumberFormat() override;
  explicit constexpr NumberFormat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberFormat(const NumberFormat& from);
  NumberFormat(NumberFormat&& from) noexcept
    : NumberFormat() {
    *this = ::std::move(from);
  }

  inline NumberFormat& operator=(const NumberFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberFormat& operator=(NumberFormat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NumberFormat& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberFormat* internal_default_instance() {
    return reinterpret_cast<const NumberFormat*>(
               &_NumberFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NumberFormat& a, NumberFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberFormat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NumberFormat* New() const final {
    return new NumberFormat();
  }

  NumberFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NumberFormat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NumberFormat& from);
  void MergeFrom(const NumberFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NumberFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "i18n.phonenumbers.NumberFormat";
  }
  protected:
  explicit NumberFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeadingDigitsPatternFieldNumber = 3,
    kPatternFieldNumber = 1,
    kFormatFieldNumber = 2,
    kNationalPrefixFormattingRuleFieldNumber = 4,
    kDomesticCarrierCodeFormattingRuleFieldNumber = 5,
    kNationalPrefixOptionalWhenFormattingFieldNumber = 6,
  };
  // repeated string leading_digits_pattern = 3;
  int leading_digits_pattern_size() const;
  private:
  int _internal_leading_digits_pattern_size() const;
  public:
  void clear_leading_digits_pattern();
  const std::string& leading_digits_pattern(int index) const;
  std::string* mutable_leading_digits_pattern(int index);
  void set_leading_digits_pattern(int index, const std::string& value);
  void set_leading_digits_pattern(int index, std::string&& value);
  void set_leading_digits_pattern(int index, const char* value);
  void set_leading_digits_pattern(int index, const char* value, size_t size);
  std::string* add_leading_digits_pattern();
  void add_leading_digits_pattern(const std::string& value);
  void add_leading_digits_pattern(std::string&& value);
  void add_leading_digits_pattern(const char* value);
  void add_leading_digits_pattern(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& leading_digits_pattern() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_leading_digits_pattern();
  private:
  const std::string& _internal_leading_digits_pattern(int index) const;
  std::string* _internal_add_leading_digits_pattern();
  public:

  // required string pattern = 1;
  bool has_pattern() const;
  private:
  bool _internal_has_pattern() const;
  public:
  void clear_pattern();
  const std::string& pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // required string format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const std::string& format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format();
  PROTOBUF_MUST_USE_RESULT std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // optional string national_prefix_formatting_rule = 4;
  bool has_national_prefix_formatting_rule() const;
  private:
  bool _internal_has_national_prefix_formatting_rule() const;
  public:
  void clear_national_prefix_formatting_rule();
  const std::string& national_prefix_formatting_rule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_national_prefix_formatting_rule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_national_prefix_formatting_rule();
  PROTOBUF_MUST_USE_RESULT std::string* release_national_prefix_formatting_rule();
  void set_allocated_national_prefix_formatting_rule(std::string* national_prefix_formatting_rule);
  private:
  const std::string& _internal_national_prefix_formatting_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_prefix_formatting_rule(const std::string& value);
  std::string* _internal_mutable_national_prefix_formatting_rule();
  public:

  // optional string domestic_carrier_code_formatting_rule = 5;
  bool has_domestic_carrier_code_formatting_rule() const;
  private:
  bool _internal_has_domestic_carrier_code_formatting_rule() const;
  public:
  void clear_domestic_carrier_code_formatting_rule();
  const std::string& domestic_carrier_code_formatting_rule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domestic_carrier_code_formatting_rule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domestic_carrier_code_formatting_rule();
  PROTOBUF_MUST_USE_RESULT std::string* release_domestic_carrier_code_formatting_rule();
  void set_allocated_domestic_carrier_code_formatting_rule(std::string* domestic_carrier_code_formatting_rule);
  private:
  const std::string& _internal_domestic_carrier_code_formatting_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domestic_carrier_code_formatting_rule(const std::string& value);
  std::string* _internal_mutable_domestic_carrier_code_formatting_rule();
  public:

  // optional bool national_prefix_optional_when_formatting = 6 [default = false];
  bool has_national_prefix_optional_when_formatting() const;
  private:
  bool _internal_has_national_prefix_optional_when_formatting() const;
  public:
  void clear_national_prefix_optional_when_formatting();
  bool national_prefix_optional_when_formatting() const;
  void set_national_prefix_optional_when_formatting(bool value);
  private:
  bool _internal_national_prefix_optional_when_formatting() const;
  void _internal_set_national_prefix_optional_when_formatting(bool value);
  public:

  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.NumberFormat)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> leading_digits_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr national_prefix_formatting_rule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domestic_carrier_code_formatting_rule_;
  bool national_prefix_optional_when_formatting_;
  friend struct ::TableStruct_phonemetadata_2eproto;
};
// -------------------------------------------------------------------

class PhoneNumberDesc final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PhoneNumberDesc) */ {
 public:
  inline PhoneNumberDesc() : PhoneNumberDesc(nullptr) {}
  ~PhoneNumberDesc() override;
  explicit constexpr PhoneNumberDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhoneNumberDesc(const PhoneNumberDesc& from);
  PhoneNumberDesc(PhoneNumberDesc&& from) noexcept
    : PhoneNumberDesc() {
    *this = ::std::move(from);
  }

  inline PhoneNumberDesc& operator=(const PhoneNumberDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneNumberDesc& operator=(PhoneNumberDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PhoneNumberDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneNumberDesc* internal_default_instance() {
    return reinterpret_cast<const PhoneNumberDesc*>(
               &_PhoneNumberDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PhoneNumberDesc& a, PhoneNumberDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneNumberDesc* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneNumberDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneNumberDesc* New() const final {
    return new PhoneNumberDesc();
  }

  PhoneNumberDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneNumberDesc>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PhoneNumberDesc& from);
  void MergeFrom(const PhoneNumberDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhoneNumberDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "i18n.phonenumbers.PhoneNumberDesc";
  }
  protected:
  explicit PhoneNumberDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPossibleLengthFieldNumber = 9,
    kPossibleLengthLocalOnlyFieldNumber = 10,
    kNationalNumberPatternFieldNumber = 2,
    kExampleNumberFieldNumber = 6,
  };
  // repeated int32 possible_length = 9;
  int possible_length_size() const;
  private:
  int _internal_possible_length_size() const;
  public:
  void clear_possible_length();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_possible_length(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_possible_length() const;
  void _internal_add_possible_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_possible_length();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 possible_length(int index) const;
  void set_possible_length(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_possible_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      possible_length() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_possible_length();

  // repeated int32 possible_length_local_only = 10;
  int possible_length_local_only_size() const;
  private:
  int _internal_possible_length_local_only_size() const;
  public:
  void clear_possible_length_local_only();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_possible_length_local_only(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_possible_length_local_only() const;
  void _internal_add_possible_length_local_only(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_possible_length_local_only();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 possible_length_local_only(int index) const;
  void set_possible_length_local_only(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_possible_length_local_only(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      possible_length_local_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_possible_length_local_only();

  // optional string national_number_pattern = 2;
  bool has_national_number_pattern() const;
  private:
  bool _internal_has_national_number_pattern() const;
  public:
  void clear_national_number_pattern();
  const std::string& national_number_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_national_number_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_national_number_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_national_number_pattern();
  void set_allocated_national_number_pattern(std::string* national_number_pattern);
  private:
  const std::string& _internal_national_number_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_number_pattern(const std::string& value);
  std::string* _internal_mutable_national_number_pattern();
  public:

  // optional string example_number = 6;
  bool has_example_number() const;
  private:
  bool _internal_has_example_number() const;
  public:
  void clear_example_number();
  const std::string& example_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_example_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_example_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_example_number();
  void set_allocated_example_number(std::string* example_number);
  private:
  const std::string& _internal_example_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_example_number(const std::string& value);
  std::string* _internal_mutable_example_number();
  public:

  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneNumberDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > possible_length_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > possible_length_local_only_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr national_number_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr example_number_;
  friend struct ::TableStruct_phonemetadata_2eproto;
};
// -------------------------------------------------------------------

class PhoneMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PhoneMetadata) */ {
 public:
  inline PhoneMetadata() : PhoneMetadata(nullptr) {}
  ~PhoneMetadata() override;
  explicit constexpr PhoneMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhoneMetadata(const PhoneMetadata& from);
  PhoneMetadata(PhoneMetadata&& from) noexcept
    : PhoneMetadata() {
    *this = ::std::move(from);
  }

  inline PhoneMetadata& operator=(const PhoneMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneMetadata& operator=(PhoneMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PhoneMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneMetadata* internal_default_instance() {
    return reinterpret_cast<const PhoneMetadata*>(
               &_PhoneMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PhoneMetadata& a, PhoneMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneMetadata* New() const final {
    return new PhoneMetadata();
  }

  PhoneMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PhoneMetadata& from);
  void MergeFrom(const PhoneMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhoneMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "i18n.phonenumbers.PhoneMetadata";
  }
  protected:
  explicit PhoneMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFormatFieldNumber = 19,
    kIntlNumberFormatFieldNumber = 20,
    kIdFieldNumber = 9,
    kInternationalPrefixFieldNumber = 11,
    kNationalPrefixFieldNumber = 12,
    kPreferredExtnPrefixFieldNumber = 13,
    kNationalPrefixForParsingFieldNumber = 15,
    kNationalPrefixTransformRuleFieldNumber = 16,
    kPreferredInternationalPrefixFieldNumber = 17,
    kLeadingDigitsFieldNumber = 23,
    kGeneralDescFieldNumber = 1,
    kFixedLineFieldNumber = 2,
    kMobileFieldNumber = 3,
    kTollFreeFieldNumber = 4,
    kPremiumRateFieldNumber = 5,
    kSharedCostFieldNumber = 6,
    kPersonalNumberFieldNumber = 7,
    kVoipFieldNumber = 8,
    kPagerFieldNumber = 21,
    kNoInternationalDiallingFieldNumber = 24,
    kUanFieldNumber = 25,
    kEmergencyFieldNumber = 27,
    kVoicemailFieldNumber = 28,
    kShortCodeFieldNumber = 29,
    kStandardRateFieldNumber = 30,
    kCarrierSpecificFieldNumber = 31,
    kSmsServicesFieldNumber = 33,
    kCountryCodeFieldNumber = 10,
    kSameMobileAndFixedLinePatternFieldNumber = 18,
    kMainCountryForCodeFieldNumber = 22,
    kLeadingZeroPossibleFieldNumber = 26,
    kMobileNumberPortableRegionFieldNumber = 32,
  };
  // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
  int number_format_size() const;
  private:
  int _internal_number_format_size() const;
  public:
  void clear_number_format();
  ::i18n::phonenumbers::NumberFormat* mutable_number_format(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >*
      mutable_number_format();
  private:
  const ::i18n::phonenumbers::NumberFormat& _internal_number_format(int index) const;
  ::i18n::phonenumbers::NumberFormat* _internal_add_number_format();
  public:
  const ::i18n::phonenumbers::NumberFormat& number_format(int index) const;
  ::i18n::phonenumbers::NumberFormat* add_number_format();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >&
      number_format() const;

  // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
  int intl_number_format_size() const;
  private:
  int _internal_intl_number_format_size() const;
  public:
  void clear_intl_number_format();
  ::i18n::phonenumbers::NumberFormat* mutable_intl_number_format(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >*
      mutable_intl_number_format();
  private:
  const ::i18n::phonenumbers::NumberFormat& _internal_intl_number_format(int index) const;
  ::i18n::phonenumbers::NumberFormat* _internal_add_intl_number_format();
  public:
  const ::i18n::phonenumbers::NumberFormat& intl_number_format(int index) const;
  ::i18n::phonenumbers::NumberFormat* add_intl_number_format();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >&
      intl_number_format() const;

  // required string id = 9;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string international_prefix = 11;
  bool has_international_prefix() const;
  private:
  bool _internal_has_international_prefix() const;
  public:
  void clear_international_prefix();
  const std::string& international_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_international_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_international_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_international_prefix();
  void set_allocated_international_prefix(std::string* international_prefix);
  private:
  const std::string& _internal_international_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_international_prefix(const std::string& value);
  std::string* _internal_mutable_international_prefix();
  public:

  // optional string national_prefix = 12;
  bool has_national_prefix() const;
  private:
  bool _internal_has_national_prefix() const;
  public:
  void clear_national_prefix();
  const std::string& national_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_national_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_national_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_national_prefix();
  void set_allocated_national_prefix(std::string* national_prefix);
  private:
  const std::string& _internal_national_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_prefix(const std::string& value);
  std::string* _internal_mutable_national_prefix();
  public:

  // optional string preferred_extn_prefix = 13;
  bool has_preferred_extn_prefix() const;
  private:
  bool _internal_has_preferred_extn_prefix() const;
  public:
  void clear_preferred_extn_prefix();
  const std::string& preferred_extn_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preferred_extn_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preferred_extn_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_preferred_extn_prefix();
  void set_allocated_preferred_extn_prefix(std::string* preferred_extn_prefix);
  private:
  const std::string& _internal_preferred_extn_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_extn_prefix(const std::string& value);
  std::string* _internal_mutable_preferred_extn_prefix();
  public:

  // optional string national_prefix_for_parsing = 15;
  bool has_national_prefix_for_parsing() const;
  private:
  bool _internal_has_national_prefix_for_parsing() const;
  public:
  void clear_national_prefix_for_parsing();
  const std::string& national_prefix_for_parsing() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_national_prefix_for_parsing(ArgT0&& arg0, ArgT... args);
  std::string* mutable_national_prefix_for_parsing();
  PROTOBUF_MUST_USE_RESULT std::string* release_national_prefix_for_parsing();
  void set_allocated_national_prefix_for_parsing(std::string* national_prefix_for_parsing);
  private:
  const std::string& _internal_national_prefix_for_parsing() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_prefix_for_parsing(const std::string& value);
  std::string* _internal_mutable_national_prefix_for_parsing();
  public:

  // optional string national_prefix_transform_rule = 16;
  bool has_national_prefix_transform_rule() const;
  private:
  bool _internal_has_national_prefix_transform_rule() const;
  public:
  void clear_national_prefix_transform_rule();
  const std::string& national_prefix_transform_rule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_national_prefix_transform_rule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_national_prefix_transform_rule();
  PROTOBUF_MUST_USE_RESULT std::string* release_national_prefix_transform_rule();
  void set_allocated_national_prefix_transform_rule(std::string* national_prefix_transform_rule);
  private:
  const std::string& _internal_national_prefix_transform_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_national_prefix_transform_rule(const std::string& value);
  std::string* _internal_mutable_national_prefix_transform_rule();
  public:

  // optional string preferred_international_prefix = 17;
  bool has_preferred_international_prefix() const;
  private:
  bool _internal_has_preferred_international_prefix() const;
  public:
  void clear_preferred_international_prefix();
  const std::string& preferred_international_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preferred_international_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preferred_international_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_preferred_international_prefix();
  void set_allocated_preferred_international_prefix(std::string* preferred_international_prefix);
  private:
  const std::string& _internal_preferred_international_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_international_prefix(const std::string& value);
  std::string* _internal_mutable_preferred_international_prefix();
  public:

  // optional string leading_digits = 23;
  bool has_leading_digits() const;
  private:
  bool _internal_has_leading_digits() const;
  public:
  void clear_leading_digits();
  const std::string& leading_digits() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leading_digits(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leading_digits();
  PROTOBUF_MUST_USE_RESULT std::string* release_leading_digits();
  void set_allocated_leading_digits(std::string* leading_digits);
  private:
  const std::string& _internal_leading_digits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leading_digits(const std::string& value);
  std::string* _internal_mutable_leading_digits();
  public:

  // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
  bool has_general_desc() const;
  private:
  bool _internal_has_general_desc() const;
  public:
  void clear_general_desc();
  const ::i18n::phonenumbers::PhoneNumberDesc& general_desc() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_general_desc();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_general_desc();
  void set_allocated_general_desc(::i18n::phonenumbers::PhoneNumberDesc* general_desc);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_general_desc() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_general_desc();
  public:
  void unsafe_arena_set_allocated_general_desc(
      ::i18n::phonenumbers::PhoneNumberDesc* general_desc);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_general_desc();

  // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
  bool has_fixed_line() const;
  private:
  bool _internal_has_fixed_line() const;
  public:
  void clear_fixed_line();
  const ::i18n::phonenumbers::PhoneNumberDesc& fixed_line() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_fixed_line();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_fixed_line();
  void set_allocated_fixed_line(::i18n::phonenumbers::PhoneNumberDesc* fixed_line);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_fixed_line() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_fixed_line();
  public:
  void unsafe_arena_set_allocated_fixed_line(
      ::i18n::phonenumbers::PhoneNumberDesc* fixed_line);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_fixed_line();

  // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
  bool has_mobile() const;
  private:
  bool _internal_has_mobile() const;
  public:
  void clear_mobile();
  const ::i18n::phonenumbers::PhoneNumberDesc& mobile() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_mobile();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_mobile();
  void set_allocated_mobile(::i18n::phonenumbers::PhoneNumberDesc* mobile);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_mobile() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_mobile();
  public:
  void unsafe_arena_set_allocated_mobile(
      ::i18n::phonenumbers::PhoneNumberDesc* mobile);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_mobile();

  // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
  bool has_toll_free() const;
  private:
  bool _internal_has_toll_free() const;
  public:
  void clear_toll_free();
  const ::i18n::phonenumbers::PhoneNumberDesc& toll_free() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_toll_free();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_toll_free();
  void set_allocated_toll_free(::i18n::phonenumbers::PhoneNumberDesc* toll_free);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_toll_free() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_toll_free();
  public:
  void unsafe_arena_set_allocated_toll_free(
      ::i18n::phonenumbers::PhoneNumberDesc* toll_free);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_toll_free();

  // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
  bool has_premium_rate() const;
  private:
  bool _internal_has_premium_rate() const;
  public:
  void clear_premium_rate();
  const ::i18n::phonenumbers::PhoneNumberDesc& premium_rate() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_premium_rate();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_premium_rate();
  void set_allocated_premium_rate(::i18n::phonenumbers::PhoneNumberDesc* premium_rate);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_premium_rate() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_premium_rate();
  public:
  void unsafe_arena_set_allocated_premium_rate(
      ::i18n::phonenumbers::PhoneNumberDesc* premium_rate);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_premium_rate();

  // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
  bool has_shared_cost() const;
  private:
  bool _internal_has_shared_cost() const;
  public:
  void clear_shared_cost();
  const ::i18n::phonenumbers::PhoneNumberDesc& shared_cost() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_shared_cost();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_shared_cost();
  void set_allocated_shared_cost(::i18n::phonenumbers::PhoneNumberDesc* shared_cost);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_shared_cost() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_shared_cost();
  public:
  void unsafe_arena_set_allocated_shared_cost(
      ::i18n::phonenumbers::PhoneNumberDesc* shared_cost);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_shared_cost();

  // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
  bool has_personal_number() const;
  private:
  bool _internal_has_personal_number() const;
  public:
  void clear_personal_number();
  const ::i18n::phonenumbers::PhoneNumberDesc& personal_number() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_personal_number();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_personal_number();
  void set_allocated_personal_number(::i18n::phonenumbers::PhoneNumberDesc* personal_number);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_personal_number() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_personal_number();
  public:
  void unsafe_arena_set_allocated_personal_number(
      ::i18n::phonenumbers::PhoneNumberDesc* personal_number);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_personal_number();

  // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
  bool has_voip() const;
  private:
  bool _internal_has_voip() const;
  public:
  void clear_voip();
  const ::i18n::phonenumbers::PhoneNumberDesc& voip() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_voip();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_voip();
  void set_allocated_voip(::i18n::phonenumbers::PhoneNumberDesc* voip);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_voip() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_voip();
  public:
  void unsafe_arena_set_allocated_voip(
      ::i18n::phonenumbers::PhoneNumberDesc* voip);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_voip();

  // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
  bool has_pager() const;
  private:
  bool _internal_has_pager() const;
  public:
  void clear_pager();
  const ::i18n::phonenumbers::PhoneNumberDesc& pager() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_pager();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_pager();
  void set_allocated_pager(::i18n::phonenumbers::PhoneNumberDesc* pager);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_pager() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_pager();
  public:
  void unsafe_arena_set_allocated_pager(
      ::i18n::phonenumbers::PhoneNumberDesc* pager);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_pager();

  // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
  bool has_no_international_dialling() const;
  private:
  bool _internal_has_no_international_dialling() const;
  public:
  void clear_no_international_dialling();
  const ::i18n::phonenumbers::PhoneNumberDesc& no_international_dialling() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_no_international_dialling();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_no_international_dialling();
  void set_allocated_no_international_dialling(::i18n::phonenumbers::PhoneNumberDesc* no_international_dialling);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_no_international_dialling() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_no_international_dialling();
  public:
  void unsafe_arena_set_allocated_no_international_dialling(
      ::i18n::phonenumbers::PhoneNumberDesc* no_international_dialling);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_no_international_dialling();

  // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
  bool has_uan() const;
  private:
  bool _internal_has_uan() const;
  public:
  void clear_uan();
  const ::i18n::phonenumbers::PhoneNumberDesc& uan() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_uan();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_uan();
  void set_allocated_uan(::i18n::phonenumbers::PhoneNumberDesc* uan);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_uan() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_uan();
  public:
  void unsafe_arena_set_allocated_uan(
      ::i18n::phonenumbers::PhoneNumberDesc* uan);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_uan();

  // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
  bool has_emergency() const;
  private:
  bool _internal_has_emergency() const;
  public:
  void clear_emergency();
  const ::i18n::phonenumbers::PhoneNumberDesc& emergency() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_emergency();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_emergency();
  void set_allocated_emergency(::i18n::phonenumbers::PhoneNumberDesc* emergency);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_emergency() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_emergency();
  public:
  void unsafe_arena_set_allocated_emergency(
      ::i18n::phonenumbers::PhoneNumberDesc* emergency);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_emergency();

  // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
  bool has_voicemail() const;
  private:
  bool _internal_has_voicemail() const;
  public:
  void clear_voicemail();
  const ::i18n::phonenumbers::PhoneNumberDesc& voicemail() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_voicemail();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_voicemail();
  void set_allocated_voicemail(::i18n::phonenumbers::PhoneNumberDesc* voicemail);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_voicemail() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_voicemail();
  public:
  void unsafe_arena_set_allocated_voicemail(
      ::i18n::phonenumbers::PhoneNumberDesc* voicemail);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_voicemail();

  // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
  bool has_short_code() const;
  private:
  bool _internal_has_short_code() const;
  public:
  void clear_short_code();
  const ::i18n::phonenumbers::PhoneNumberDesc& short_code() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_short_code();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_short_code();
  void set_allocated_short_code(::i18n::phonenumbers::PhoneNumberDesc* short_code);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_short_code() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_short_code();
  public:
  void unsafe_arena_set_allocated_short_code(
      ::i18n::phonenumbers::PhoneNumberDesc* short_code);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_short_code();

  // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
  bool has_standard_rate() const;
  private:
  bool _internal_has_standard_rate() const;
  public:
  void clear_standard_rate();
  const ::i18n::phonenumbers::PhoneNumberDesc& standard_rate() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_standard_rate();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_standard_rate();
  void set_allocated_standard_rate(::i18n::phonenumbers::PhoneNumberDesc* standard_rate);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_standard_rate() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_standard_rate();
  public:
  void unsafe_arena_set_allocated_standard_rate(
      ::i18n::phonenumbers::PhoneNumberDesc* standard_rate);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_standard_rate();

  // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
  bool has_carrier_specific() const;
  private:
  bool _internal_has_carrier_specific() const;
  public:
  void clear_carrier_specific();
  const ::i18n::phonenumbers::PhoneNumberDesc& carrier_specific() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_carrier_specific();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_carrier_specific();
  void set_allocated_carrier_specific(::i18n::phonenumbers::PhoneNumberDesc* carrier_specific);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_carrier_specific() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_carrier_specific();
  public:
  void unsafe_arena_set_allocated_carrier_specific(
      ::i18n::phonenumbers::PhoneNumberDesc* carrier_specific);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_carrier_specific();

  // optional .i18n.phonenumbers.PhoneNumberDesc sms_services = 33;
  bool has_sms_services() const;
  private:
  bool _internal_has_sms_services() const;
  public:
  void clear_sms_services();
  const ::i18n::phonenumbers::PhoneNumberDesc& sms_services() const;
  PROTOBUF_MUST_USE_RESULT ::i18n::phonenumbers::PhoneNumberDesc* release_sms_services();
  ::i18n::phonenumbers::PhoneNumberDesc* mutable_sms_services();
  void set_allocated_sms_services(::i18n::phonenumbers::PhoneNumberDesc* sms_services);
  private:
  const ::i18n::phonenumbers::PhoneNumberDesc& _internal_sms_services() const;
  ::i18n::phonenumbers::PhoneNumberDesc* _internal_mutable_sms_services();
  public:
  void unsafe_arena_set_allocated_sms_services(
      ::i18n::phonenumbers::PhoneNumberDesc* sms_services);
  ::i18n::phonenumbers::PhoneNumberDesc* unsafe_arena_release_sms_services();

  // optional int32 country_code = 10;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  ::PROTOBUF_NAMESPACE_ID::int32 country_code() const;
  void set_country_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_country_code() const;
  void _internal_set_country_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
  bool has_same_mobile_and_fixed_line_pattern() const;
  private:
  bool _internal_has_same_mobile_and_fixed_line_pattern() const;
  public:
  void clear_same_mobile_and_fixed_line_pattern();
  bool same_mobile_and_fixed_line_pattern() const;
  void set_same_mobile_and_fixed_line_pattern(bool value);
  private:
  bool _internal_same_mobile_and_fixed_line_pattern() const;
  void _internal_set_same_mobile_and_fixed_line_pattern(bool value);
  public:

  // optional bool main_country_for_code = 22 [default = false];
  bool has_main_country_for_code() const;
  private:
  bool _internal_has_main_country_for_code() const;
  public:
  void clear_main_country_for_code();
  bool main_country_for_code() const;
  void set_main_country_for_code(bool value);
  private:
  bool _internal_main_country_for_code() const;
  void _internal_set_main_country_for_code(bool value);
  public:

  // optional bool leading_zero_possible = 26 [default = false];
  bool has_leading_zero_possible() const;
  private:
  bool _internal_has_leading_zero_possible() const;
  public:
  void clear_leading_zero_possible();
  bool leading_zero_possible() const;
  void set_leading_zero_possible(bool value);
  private:
  bool _internal_leading_zero_possible() const;
  void _internal_set_leading_zero_possible(bool value);
  public:

  // optional bool mobile_number_portable_region = 32 [default = false];
  bool has_mobile_number_portable_region() const;
  private:
  bool _internal_has_mobile_number_portable_region() const;
  public:
  void clear_mobile_number_portable_region();
  bool mobile_number_portable_region() const;
  void set_mobile_number_portable_region(bool value);
  private:
  bool _internal_mobile_number_portable_region() const;
  void _internal_set_mobile_number_portable_region(bool value);
  public:

  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat > number_format_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat > intl_number_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr international_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr national_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_extn_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr national_prefix_for_parsing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr national_prefix_transform_rule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_international_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leading_digits_;
  ::i18n::phonenumbers::PhoneNumberDesc* general_desc_;
  ::i18n::phonenumbers::PhoneNumberDesc* fixed_line_;
  ::i18n::phonenumbers::PhoneNumberDesc* mobile_;
  ::i18n::phonenumbers::PhoneNumberDesc* toll_free_;
  ::i18n::phonenumbers::PhoneNumberDesc* premium_rate_;
  ::i18n::phonenumbers::PhoneNumberDesc* shared_cost_;
  ::i18n::phonenumbers::PhoneNumberDesc* personal_number_;
  ::i18n::phonenumbers::PhoneNumberDesc* voip_;
  ::i18n::phonenumbers::PhoneNumberDesc* pager_;
  ::i18n::phonenumbers::PhoneNumberDesc* no_international_dialling_;
  ::i18n::phonenumbers::PhoneNumberDesc* uan_;
  ::i18n::phonenumbers::PhoneNumberDesc* emergency_;
  ::i18n::phonenumbers::PhoneNumberDesc* voicemail_;
  ::i18n::phonenumbers::PhoneNumberDesc* short_code_;
  ::i18n::phonenumbers::PhoneNumberDesc* standard_rate_;
  ::i18n::phonenumbers::PhoneNumberDesc* carrier_specific_;
  ::i18n::phonenumbers::PhoneNumberDesc* sms_services_;
  ::PROTOBUF_NAMESPACE_ID::int32 country_code_;
  bool same_mobile_and_fixed_line_pattern_;
  bool main_country_for_code_;
  bool leading_zero_possible_;
  bool mobile_number_portable_region_;
  friend struct ::TableStruct_phonemetadata_2eproto;
};
// -------------------------------------------------------------------

class PhoneMetadataCollection final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:i18n.phonenumbers.PhoneMetadataCollection) */ {
 public:
  inline PhoneMetadataCollection() : PhoneMetadataCollection(nullptr) {}
  ~PhoneMetadataCollection() override;
  explicit constexpr PhoneMetadataCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhoneMetadataCollection(const PhoneMetadataCollection& from);
  PhoneMetadataCollection(PhoneMetadataCollection&& from) noexcept
    : PhoneMetadataCollection() {
    *this = ::std::move(from);
  }

  inline PhoneMetadataCollection& operator=(const PhoneMetadataCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneMetadataCollection& operator=(PhoneMetadataCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PhoneMetadataCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneMetadataCollection* internal_default_instance() {
    return reinterpret_cast<const PhoneMetadataCollection*>(
               &_PhoneMetadataCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PhoneMetadataCollection& a, PhoneMetadataCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneMetadataCollection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneMetadataCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneMetadataCollection* New() const final {
    return new PhoneMetadataCollection();
  }

  PhoneMetadataCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneMetadataCollection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PhoneMetadataCollection& from);
  void MergeFrom(const PhoneMetadataCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhoneMetadataCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "i18n.phonenumbers.PhoneMetadataCollection";
  }
  protected:
  explicit PhoneMetadataCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::i18n::phonenumbers::PhoneMetadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata >*
      mutable_metadata();
  private:
  const ::i18n::phonenumbers::PhoneMetadata& _internal_metadata(int index) const;
  ::i18n::phonenumbers::PhoneMetadata* _internal_add_metadata();
  public:
  const ::i18n::phonenumbers::PhoneMetadata& metadata(int index) const;
  ::i18n::phonenumbers::PhoneMetadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata >&
      metadata() const;

  // @@protoc_insertion_point(class_scope:i18n.phonenumbers.PhoneMetadataCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata > metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phonemetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NumberFormat

// required string pattern = 1;
inline bool NumberFormat::_internal_has_pattern() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NumberFormat::has_pattern() const {
  return _internal_has_pattern();
}
inline void NumberFormat::clear_pattern() {
  pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NumberFormat::pattern() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.pattern)
  return _internal_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NumberFormat::set_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.pattern)
}
inline std::string* NumberFormat::mutable_pattern() {
  std::string* _s = _internal_mutable_pattern();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.pattern)
  return _s;
}
inline const std::string& NumberFormat::_internal_pattern() const {
  return pattern_.Get();
}
inline void NumberFormat::_internal_set_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NumberFormat::_internal_mutable_pattern() {
  _has_bits_[0] |= 0x00000001u;
  return pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NumberFormat::release_pattern() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.pattern)
  if (!_internal_has_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NumberFormat::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.pattern)
}

// required string format = 2;
inline bool NumberFormat::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NumberFormat::has_format() const {
  return _internal_has_format();
}
inline void NumberFormat::clear_format() {
  format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NumberFormat::format() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.format)
  return _internal_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NumberFormat::set_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.format)
}
inline std::string* NumberFormat::mutable_format() {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.format)
  return _s;
}
inline const std::string& NumberFormat::_internal_format() const {
  return format_.Get();
}
inline void NumberFormat::_internal_set_format(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NumberFormat::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000002u;
  return format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NumberFormat::release_format() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.format)
  if (!_internal_has_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NumberFormat::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.format)
}

// repeated string leading_digits_pattern = 3;
inline int NumberFormat::_internal_leading_digits_pattern_size() const {
  return leading_digits_pattern_.size();
}
inline int NumberFormat::leading_digits_pattern_size() const {
  return _internal_leading_digits_pattern_size();
}
inline void NumberFormat::clear_leading_digits_pattern() {
  leading_digits_pattern_.Clear();
}
inline std::string* NumberFormat::add_leading_digits_pattern() {
  std::string* _s = _internal_add_leading_digits_pattern();
  // @@protoc_insertion_point(field_add_mutable:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return _s;
}
inline const std::string& NumberFormat::_internal_leading_digits_pattern(int index) const {
  return leading_digits_pattern_.Get(index);
}
inline const std::string& NumberFormat::leading_digits_pattern(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return _internal_leading_digits_pattern(index);
}
inline std::string* NumberFormat::mutable_leading_digits_pattern(int index) {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return leading_digits_pattern_.Mutable(index);
}
inline void NumberFormat::set_leading_digits_pattern(int index, const std::string& value) {
  leading_digits_pattern_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::set_leading_digits_pattern(int index, std::string&& value) {
  leading_digits_pattern_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::set_leading_digits_pattern(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  leading_digits_pattern_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::set_leading_digits_pattern(int index, const char* value, size_t size) {
  leading_digits_pattern_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline std::string* NumberFormat::_internal_add_leading_digits_pattern() {
  return leading_digits_pattern_.Add();
}
inline void NumberFormat::add_leading_digits_pattern(const std::string& value) {
  leading_digits_pattern_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::add_leading_digits_pattern(std::string&& value) {
  leading_digits_pattern_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::add_leading_digits_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  leading_digits_pattern_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline void NumberFormat::add_leading_digits_pattern(const char* value, size_t size) {
  leading_digits_pattern_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NumberFormat::leading_digits_pattern() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return leading_digits_pattern_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NumberFormat::mutable_leading_digits_pattern() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
  return &leading_digits_pattern_;
}

// optional string national_prefix_formatting_rule = 4;
inline bool NumberFormat::_internal_has_national_prefix_formatting_rule() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NumberFormat::has_national_prefix_formatting_rule() const {
  return _internal_has_national_prefix_formatting_rule();
}
inline void NumberFormat::clear_national_prefix_formatting_rule() {
  national_prefix_formatting_rule_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NumberFormat::national_prefix_formatting_rule() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
  return _internal_national_prefix_formatting_rule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NumberFormat::set_national_prefix_formatting_rule(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 national_prefix_formatting_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
}
inline std::string* NumberFormat::mutable_national_prefix_formatting_rule() {
  std::string* _s = _internal_mutable_national_prefix_formatting_rule();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
  return _s;
}
inline const std::string& NumberFormat::_internal_national_prefix_formatting_rule() const {
  return national_prefix_formatting_rule_.Get();
}
inline void NumberFormat::_internal_set_national_prefix_formatting_rule(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  national_prefix_formatting_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NumberFormat::_internal_mutable_national_prefix_formatting_rule() {
  _has_bits_[0] |= 0x00000004u;
  return national_prefix_formatting_rule_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NumberFormat::release_national_prefix_formatting_rule() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
  if (!_internal_has_national_prefix_formatting_rule()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return national_prefix_formatting_rule_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NumberFormat::set_allocated_national_prefix_formatting_rule(std::string* national_prefix_formatting_rule) {
  if (national_prefix_formatting_rule != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  national_prefix_formatting_rule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), national_prefix_formatting_rule,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
}

// optional bool national_prefix_optional_when_formatting = 6 [default = false];
inline bool NumberFormat::_internal_has_national_prefix_optional_when_formatting() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NumberFormat::has_national_prefix_optional_when_formatting() const {
  return _internal_has_national_prefix_optional_when_formatting();
}
inline void NumberFormat::clear_national_prefix_optional_when_formatting() {
  national_prefix_optional_when_formatting_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool NumberFormat::_internal_national_prefix_optional_when_formatting() const {
  return national_prefix_optional_when_formatting_;
}
inline bool NumberFormat::national_prefix_optional_when_formatting() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.national_prefix_optional_when_formatting)
  return _internal_national_prefix_optional_when_formatting();
}
inline void NumberFormat::_internal_set_national_prefix_optional_when_formatting(bool value) {
  _has_bits_[0] |= 0x00000010u;
  national_prefix_optional_when_formatting_ = value;
}
inline void NumberFormat::set_national_prefix_optional_when_formatting(bool value) {
  _internal_set_national_prefix_optional_when_formatting(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.national_prefix_optional_when_formatting)
}

// optional string domestic_carrier_code_formatting_rule = 5;
inline bool NumberFormat::_internal_has_domestic_carrier_code_formatting_rule() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NumberFormat::has_domestic_carrier_code_formatting_rule() const {
  return _internal_has_domestic_carrier_code_formatting_rule();
}
inline void NumberFormat::clear_domestic_carrier_code_formatting_rule() {
  domestic_carrier_code_formatting_rule_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NumberFormat::domestic_carrier_code_formatting_rule() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
  return _internal_domestic_carrier_code_formatting_rule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NumberFormat::set_domestic_carrier_code_formatting_rule(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 domestic_carrier_code_formatting_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
}
inline std::string* NumberFormat::mutable_domestic_carrier_code_formatting_rule() {
  std::string* _s = _internal_mutable_domestic_carrier_code_formatting_rule();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
  return _s;
}
inline const std::string& NumberFormat::_internal_domestic_carrier_code_formatting_rule() const {
  return domestic_carrier_code_formatting_rule_.Get();
}
inline void NumberFormat::_internal_set_domestic_carrier_code_formatting_rule(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  domestic_carrier_code_formatting_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NumberFormat::_internal_mutable_domestic_carrier_code_formatting_rule() {
  _has_bits_[0] |= 0x00000008u;
  return domestic_carrier_code_formatting_rule_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NumberFormat::release_domestic_carrier_code_formatting_rule() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
  if (!_internal_has_domestic_carrier_code_formatting_rule()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return domestic_carrier_code_formatting_rule_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NumberFormat::set_allocated_domestic_carrier_code_formatting_rule(std::string* domestic_carrier_code_formatting_rule) {
  if (domestic_carrier_code_formatting_rule != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  domestic_carrier_code_formatting_rule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domestic_carrier_code_formatting_rule,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
}

// -------------------------------------------------------------------

// PhoneNumberDesc

// optional string national_number_pattern = 2;
inline bool PhoneNumberDesc::_internal_has_national_number_pattern() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PhoneNumberDesc::has_national_number_pattern() const {
  return _internal_has_national_number_pattern();
}
inline void PhoneNumberDesc::clear_national_number_pattern() {
  national_number_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneNumberDesc::national_number_pattern() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
  return _internal_national_number_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneNumberDesc::set_national_number_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 national_number_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
}
inline std::string* PhoneNumberDesc::mutable_national_number_pattern() {
  std::string* _s = _internal_mutable_national_number_pattern();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
  return _s;
}
inline const std::string& PhoneNumberDesc::_internal_national_number_pattern() const {
  return national_number_pattern_.Get();
}
inline void PhoneNumberDesc::_internal_set_national_number_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  national_number_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneNumberDesc::_internal_mutable_national_number_pattern() {
  _has_bits_[0] |= 0x00000001u;
  return national_number_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneNumberDesc::release_national_number_pattern() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
  if (!_internal_has_national_number_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return national_number_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneNumberDesc::set_allocated_national_number_pattern(std::string* national_number_pattern) {
  if (national_number_pattern != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  national_number_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), national_number_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
}

// repeated int32 possible_length = 9;
inline int PhoneNumberDesc::_internal_possible_length_size() const {
  return possible_length_.size();
}
inline int PhoneNumberDesc::possible_length_size() const {
  return _internal_possible_length_size();
}
inline void PhoneNumberDesc::clear_possible_length() {
  possible_length_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhoneNumberDesc::_internal_possible_length(int index) const {
  return possible_length_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhoneNumberDesc::possible_length(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.possible_length)
  return _internal_possible_length(index);
}
inline void PhoneNumberDesc::set_possible_length(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  possible_length_.Set(index, value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.possible_length)
}
inline void PhoneNumberDesc::_internal_add_possible_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  possible_length_.Add(value);
}
inline void PhoneNumberDesc::add_possible_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_possible_length(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneNumberDesc.possible_length)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PhoneNumberDesc::_internal_possible_length() const {
  return possible_length_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PhoneNumberDesc::possible_length() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneNumberDesc.possible_length)
  return _internal_possible_length();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PhoneNumberDesc::_internal_mutable_possible_length() {
  return &possible_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PhoneNumberDesc::mutable_possible_length() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneNumberDesc.possible_length)
  return _internal_mutable_possible_length();
}

// repeated int32 possible_length_local_only = 10;
inline int PhoneNumberDesc::_internal_possible_length_local_only_size() const {
  return possible_length_local_only_.size();
}
inline int PhoneNumberDesc::possible_length_local_only_size() const {
  return _internal_possible_length_local_only_size();
}
inline void PhoneNumberDesc::clear_possible_length_local_only() {
  possible_length_local_only_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhoneNumberDesc::_internal_possible_length_local_only(int index) const {
  return possible_length_local_only_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhoneNumberDesc::possible_length_local_only(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
  return _internal_possible_length_local_only(index);
}
inline void PhoneNumberDesc::set_possible_length_local_only(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  possible_length_local_only_.Set(index, value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
}
inline void PhoneNumberDesc::_internal_add_possible_length_local_only(::PROTOBUF_NAMESPACE_ID::int32 value) {
  possible_length_local_only_.Add(value);
}
inline void PhoneNumberDesc::add_possible_length_local_only(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_possible_length_local_only(value);
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PhoneNumberDesc::_internal_possible_length_local_only() const {
  return possible_length_local_only_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PhoneNumberDesc::possible_length_local_only() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
  return _internal_possible_length_local_only();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PhoneNumberDesc::_internal_mutable_possible_length_local_only() {
  return &possible_length_local_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PhoneNumberDesc::mutable_possible_length_local_only() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneNumberDesc.possible_length_local_only)
  return _internal_mutable_possible_length_local_only();
}

// optional string example_number = 6;
inline bool PhoneNumberDesc::_internal_has_example_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PhoneNumberDesc::has_example_number() const {
  return _internal_has_example_number();
}
inline void PhoneNumberDesc::clear_example_number() {
  example_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PhoneNumberDesc::example_number() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.example_number)
  return _internal_example_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneNumberDesc::set_example_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 example_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.example_number)
}
inline std::string* PhoneNumberDesc::mutable_example_number() {
  std::string* _s = _internal_mutable_example_number();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.example_number)
  return _s;
}
inline const std::string& PhoneNumberDesc::_internal_example_number() const {
  return example_number_.Get();
}
inline void PhoneNumberDesc::_internal_set_example_number(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  example_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneNumberDesc::_internal_mutable_example_number() {
  _has_bits_[0] |= 0x00000002u;
  return example_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneNumberDesc::release_example_number() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.example_number)
  if (!_internal_has_example_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return example_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneNumberDesc::set_allocated_example_number(std::string* example_number) {
  if (example_number != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  example_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), example_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.example_number)
}

// -------------------------------------------------------------------

// PhoneMetadata

// optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
inline bool PhoneMetadata::_internal_has_general_desc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || general_desc_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_general_desc() const {
  return _internal_has_general_desc();
}
inline void PhoneMetadata::clear_general_desc() {
  if (general_desc_ != nullptr) general_desc_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_general_desc() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = general_desc_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::general_desc() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.general_desc)
  return _internal_general_desc();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_general_desc(
    ::i18n::phonenumbers::PhoneNumberDesc* general_desc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(general_desc_);
  }
  general_desc_ = general_desc;
  if (general_desc) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.general_desc)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_general_desc() {
  _has_bits_[0] &= ~0x00000100u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = general_desc_;
  general_desc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_general_desc() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.general_desc)
  _has_bits_[0] &= ~0x00000100u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = general_desc_;
  general_desc_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_general_desc() {
  _has_bits_[0] |= 0x00000100u;
  if (general_desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    general_desc_ = p;
  }
  return general_desc_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_general_desc() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_general_desc();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.general_desc)
  return _msg;
}
inline void PhoneMetadata::set_allocated_general_desc(::i18n::phonenumbers::PhoneNumberDesc* general_desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete general_desc_;
  }
  if (general_desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(general_desc);
    if (message_arena != submessage_arena) {
      general_desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, general_desc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  general_desc_ = general_desc;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.general_desc)
}

// optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
inline bool PhoneMetadata::_internal_has_fixed_line() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || fixed_line_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_fixed_line() const {
  return _internal_has_fixed_line();
}
inline void PhoneMetadata::clear_fixed_line() {
  if (fixed_line_ != nullptr) fixed_line_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_fixed_line() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = fixed_line_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::fixed_line() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.fixed_line)
  return _internal_fixed_line();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_fixed_line(
    ::i18n::phonenumbers::PhoneNumberDesc* fixed_line) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_line_);
  }
  fixed_line_ = fixed_line;
  if (fixed_line) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.fixed_line)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_fixed_line() {
  _has_bits_[0] &= ~0x00000200u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = fixed_line_;
  fixed_line_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_fixed_line() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.fixed_line)
  _has_bits_[0] &= ~0x00000200u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = fixed_line_;
  fixed_line_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_fixed_line() {
  _has_bits_[0] |= 0x00000200u;
  if (fixed_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    fixed_line_ = p;
  }
  return fixed_line_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_fixed_line() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_fixed_line();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.fixed_line)
  return _msg;
}
inline void PhoneMetadata::set_allocated_fixed_line(::i18n::phonenumbers::PhoneNumberDesc* fixed_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fixed_line_;
  }
  if (fixed_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(fixed_line);
    if (message_arena != submessage_arena) {
      fixed_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  fixed_line_ = fixed_line;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.fixed_line)
}

// optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
inline bool PhoneMetadata::_internal_has_mobile() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || mobile_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_mobile() const {
  return _internal_has_mobile();
}
inline void PhoneMetadata::clear_mobile() {
  if (mobile_ != nullptr) mobile_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_mobile() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = mobile_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::mobile() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.mobile)
  return _internal_mobile();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_mobile(
    ::i18n::phonenumbers::PhoneNumberDesc* mobile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mobile_);
  }
  mobile_ = mobile;
  if (mobile) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.mobile)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_mobile() {
  _has_bits_[0] &= ~0x00000400u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = mobile_;
  mobile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_mobile() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.mobile)
  _has_bits_[0] &= ~0x00000400u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = mobile_;
  mobile_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_mobile() {
  _has_bits_[0] |= 0x00000400u;
  if (mobile_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    mobile_ = p;
  }
  return mobile_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_mobile() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_mobile();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.mobile)
  return _msg;
}
inline void PhoneMetadata::set_allocated_mobile(::i18n::phonenumbers::PhoneNumberDesc* mobile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mobile_;
  }
  if (mobile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(mobile);
    if (message_arena != submessage_arena) {
      mobile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  mobile_ = mobile;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.mobile)
}

// optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
inline bool PhoneMetadata::_internal_has_toll_free() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || toll_free_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_toll_free() const {
  return _internal_has_toll_free();
}
inline void PhoneMetadata::clear_toll_free() {
  if (toll_free_ != nullptr) toll_free_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_toll_free() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = toll_free_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::toll_free() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.toll_free)
  return _internal_toll_free();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_toll_free(
    ::i18n::phonenumbers::PhoneNumberDesc* toll_free) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toll_free_);
  }
  toll_free_ = toll_free;
  if (toll_free) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.toll_free)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_toll_free() {
  _has_bits_[0] &= ~0x00000800u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = toll_free_;
  toll_free_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_toll_free() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.toll_free)
  _has_bits_[0] &= ~0x00000800u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = toll_free_;
  toll_free_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_toll_free() {
  _has_bits_[0] |= 0x00000800u;
  if (toll_free_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    toll_free_ = p;
  }
  return toll_free_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_toll_free() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_toll_free();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.toll_free)
  return _msg;
}
inline void PhoneMetadata::set_allocated_toll_free(::i18n::phonenumbers::PhoneNumberDesc* toll_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete toll_free_;
  }
  if (toll_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(toll_free);
    if (message_arena != submessage_arena) {
      toll_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toll_free, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  toll_free_ = toll_free;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.toll_free)
}

// optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
inline bool PhoneMetadata::_internal_has_premium_rate() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || premium_rate_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_premium_rate() const {
  return _internal_has_premium_rate();
}
inline void PhoneMetadata::clear_premium_rate() {
  if (premium_rate_ != nullptr) premium_rate_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_premium_rate() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = premium_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::premium_rate() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.premium_rate)
  return _internal_premium_rate();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_premium_rate(
    ::i18n::phonenumbers::PhoneNumberDesc* premium_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(premium_rate_);
  }
  premium_rate_ = premium_rate;
  if (premium_rate) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.premium_rate)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_premium_rate() {
  _has_bits_[0] &= ~0x00001000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = premium_rate_;
  premium_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_premium_rate() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.premium_rate)
  _has_bits_[0] &= ~0x00001000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = premium_rate_;
  premium_rate_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_premium_rate() {
  _has_bits_[0] |= 0x00001000u;
  if (premium_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    premium_rate_ = p;
  }
  return premium_rate_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_premium_rate() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_premium_rate();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.premium_rate)
  return _msg;
}
inline void PhoneMetadata::set_allocated_premium_rate(::i18n::phonenumbers::PhoneNumberDesc* premium_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete premium_rate_;
  }
  if (premium_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(premium_rate);
    if (message_arena != submessage_arena) {
      premium_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, premium_rate, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  premium_rate_ = premium_rate;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.premium_rate)
}

// optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
inline bool PhoneMetadata::_internal_has_shared_cost() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || shared_cost_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_shared_cost() const {
  return _internal_has_shared_cost();
}
inline void PhoneMetadata::clear_shared_cost() {
  if (shared_cost_ != nullptr) shared_cost_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_shared_cost() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = shared_cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::shared_cost() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.shared_cost)
  return _internal_shared_cost();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_shared_cost(
    ::i18n::phonenumbers::PhoneNumberDesc* shared_cost) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shared_cost_);
  }
  shared_cost_ = shared_cost;
  if (shared_cost) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.shared_cost)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_shared_cost() {
  _has_bits_[0] &= ~0x00002000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = shared_cost_;
  shared_cost_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_shared_cost() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.shared_cost)
  _has_bits_[0] &= ~0x00002000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = shared_cost_;
  shared_cost_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_shared_cost() {
  _has_bits_[0] |= 0x00002000u;
  if (shared_cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    shared_cost_ = p;
  }
  return shared_cost_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_shared_cost() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_shared_cost();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.shared_cost)
  return _msg;
}
inline void PhoneMetadata::set_allocated_shared_cost(::i18n::phonenumbers::PhoneNumberDesc* shared_cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete shared_cost_;
  }
  if (shared_cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(shared_cost);
    if (message_arena != submessage_arena) {
      shared_cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shared_cost, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  shared_cost_ = shared_cost;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.shared_cost)
}

// optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
inline bool PhoneMetadata::_internal_has_personal_number() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || personal_number_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_personal_number() const {
  return _internal_has_personal_number();
}
inline void PhoneMetadata::clear_personal_number() {
  if (personal_number_ != nullptr) personal_number_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_personal_number() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = personal_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::personal_number() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.personal_number)
  return _internal_personal_number();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_personal_number(
    ::i18n::phonenumbers::PhoneNumberDesc* personal_number) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(personal_number_);
  }
  personal_number_ = personal_number;
  if (personal_number) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.personal_number)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_personal_number() {
  _has_bits_[0] &= ~0x00004000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = personal_number_;
  personal_number_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_personal_number() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.personal_number)
  _has_bits_[0] &= ~0x00004000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = personal_number_;
  personal_number_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_personal_number() {
  _has_bits_[0] |= 0x00004000u;
  if (personal_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    personal_number_ = p;
  }
  return personal_number_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_personal_number() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_personal_number();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.personal_number)
  return _msg;
}
inline void PhoneMetadata::set_allocated_personal_number(::i18n::phonenumbers::PhoneNumberDesc* personal_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete personal_number_;
  }
  if (personal_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(personal_number);
    if (message_arena != submessage_arena) {
      personal_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, personal_number, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  personal_number_ = personal_number;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.personal_number)
}

// optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
inline bool PhoneMetadata::_internal_has_voip() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || voip_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_voip() const {
  return _internal_has_voip();
}
inline void PhoneMetadata::clear_voip() {
  if (voip_ != nullptr) voip_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_voip() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = voip_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::voip() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.voip)
  return _internal_voip();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_voip(
    ::i18n::phonenumbers::PhoneNumberDesc* voip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voip_);
  }
  voip_ = voip;
  if (voip) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.voip)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_voip() {
  _has_bits_[0] &= ~0x00008000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = voip_;
  voip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_voip() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.voip)
  _has_bits_[0] &= ~0x00008000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = voip_;
  voip_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_voip() {
  _has_bits_[0] |= 0x00008000u;
  if (voip_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    voip_ = p;
  }
  return voip_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_voip() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_voip();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.voip)
  return _msg;
}
inline void PhoneMetadata::set_allocated_voip(::i18n::phonenumbers::PhoneNumberDesc* voip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete voip_;
  }
  if (voip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(voip);
    if (message_arena != submessage_arena) {
      voip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voip, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  voip_ = voip;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.voip)
}

// optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
inline bool PhoneMetadata::_internal_has_pager() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || pager_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_pager() const {
  return _internal_has_pager();
}
inline void PhoneMetadata::clear_pager() {
  if (pager_ != nullptr) pager_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_pager() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = pager_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::pager() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.pager)
  return _internal_pager();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_pager(
    ::i18n::phonenumbers::PhoneNumberDesc* pager) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pager_);
  }
  pager_ = pager;
  if (pager) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.pager)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_pager() {
  _has_bits_[0] &= ~0x00010000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = pager_;
  pager_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_pager() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.pager)
  _has_bits_[0] &= ~0x00010000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = pager_;
  pager_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_pager() {
  _has_bits_[0] |= 0x00010000u;
  if (pager_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    pager_ = p;
  }
  return pager_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_pager() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_pager();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.pager)
  return _msg;
}
inline void PhoneMetadata::set_allocated_pager(::i18n::phonenumbers::PhoneNumberDesc* pager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pager_;
  }
  if (pager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(pager);
    if (message_arena != submessage_arena) {
      pager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pager, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  pager_ = pager;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.pager)
}

// optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
inline bool PhoneMetadata::_internal_has_uan() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || uan_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_uan() const {
  return _internal_has_uan();
}
inline void PhoneMetadata::clear_uan() {
  if (uan_ != nullptr) uan_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_uan() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = uan_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::uan() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.uan)
  return _internal_uan();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_uan(
    ::i18n::phonenumbers::PhoneNumberDesc* uan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uan_);
  }
  uan_ = uan;
  if (uan) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.uan)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_uan() {
  _has_bits_[0] &= ~0x00040000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = uan_;
  uan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_uan() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.uan)
  _has_bits_[0] &= ~0x00040000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = uan_;
  uan_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_uan() {
  _has_bits_[0] |= 0x00040000u;
  if (uan_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    uan_ = p;
  }
  return uan_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_uan() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_uan();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.uan)
  return _msg;
}
inline void PhoneMetadata::set_allocated_uan(::i18n::phonenumbers::PhoneNumberDesc* uan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uan_;
  }
  if (uan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(uan);
    if (message_arena != submessage_arena) {
      uan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uan, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  uan_ = uan;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.uan)
}

// optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
inline bool PhoneMetadata::_internal_has_emergency() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || emergency_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_emergency() const {
  return _internal_has_emergency();
}
inline void PhoneMetadata::clear_emergency() {
  if (emergency_ != nullptr) emergency_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_emergency() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = emergency_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::emergency() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.emergency)
  return _internal_emergency();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_emergency(
    ::i18n::phonenumbers::PhoneNumberDesc* emergency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emergency_);
  }
  emergency_ = emergency;
  if (emergency) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.emergency)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_emergency() {
  _has_bits_[0] &= ~0x00080000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = emergency_;
  emergency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_emergency() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.emergency)
  _has_bits_[0] &= ~0x00080000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = emergency_;
  emergency_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_emergency() {
  _has_bits_[0] |= 0x00080000u;
  if (emergency_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    emergency_ = p;
  }
  return emergency_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_emergency() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_emergency();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.emergency)
  return _msg;
}
inline void PhoneMetadata::set_allocated_emergency(::i18n::phonenumbers::PhoneNumberDesc* emergency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete emergency_;
  }
  if (emergency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(emergency);
    if (message_arena != submessage_arena) {
      emergency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  emergency_ = emergency;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.emergency)
}

// optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
inline bool PhoneMetadata::_internal_has_voicemail() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || voicemail_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_voicemail() const {
  return _internal_has_voicemail();
}
inline void PhoneMetadata::clear_voicemail() {
  if (voicemail_ != nullptr) voicemail_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_voicemail() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = voicemail_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::voicemail() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.voicemail)
  return _internal_voicemail();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_voicemail(
    ::i18n::phonenumbers::PhoneNumberDesc* voicemail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voicemail_);
  }
  voicemail_ = voicemail;
  if (voicemail) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.voicemail)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_voicemail() {
  _has_bits_[0] &= ~0x00100000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = voicemail_;
  voicemail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_voicemail() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.voicemail)
  _has_bits_[0] &= ~0x00100000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = voicemail_;
  voicemail_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_voicemail() {
  _has_bits_[0] |= 0x00100000u;
  if (voicemail_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    voicemail_ = p;
  }
  return voicemail_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_voicemail() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_voicemail();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.voicemail)
  return _msg;
}
inline void PhoneMetadata::set_allocated_voicemail(::i18n::phonenumbers::PhoneNumberDesc* voicemail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete voicemail_;
  }
  if (voicemail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(voicemail);
    if (message_arena != submessage_arena) {
      voicemail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voicemail, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  voicemail_ = voicemail;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.voicemail)
}

// optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
inline bool PhoneMetadata::_internal_has_short_code() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || short_code_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_short_code() const {
  return _internal_has_short_code();
}
inline void PhoneMetadata::clear_short_code() {
  if (short_code_ != nullptr) short_code_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_short_code() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = short_code_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::short_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.short_code)
  return _internal_short_code();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_short_code(
    ::i18n::phonenumbers::PhoneNumberDesc* short_code) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(short_code_);
  }
  short_code_ = short_code;
  if (short_code) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.short_code)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_short_code() {
  _has_bits_[0] &= ~0x00200000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = short_code_;
  short_code_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_short_code() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.short_code)
  _has_bits_[0] &= ~0x00200000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = short_code_;
  short_code_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_short_code() {
  _has_bits_[0] |= 0x00200000u;
  if (short_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    short_code_ = p;
  }
  return short_code_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_short_code() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_short_code();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.short_code)
  return _msg;
}
inline void PhoneMetadata::set_allocated_short_code(::i18n::phonenumbers::PhoneNumberDesc* short_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete short_code_;
  }
  if (short_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(short_code);
    if (message_arena != submessage_arena) {
      short_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  short_code_ = short_code;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.short_code)
}

// optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
inline bool PhoneMetadata::_internal_has_standard_rate() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || standard_rate_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_standard_rate() const {
  return _internal_has_standard_rate();
}
inline void PhoneMetadata::clear_standard_rate() {
  if (standard_rate_ != nullptr) standard_rate_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_standard_rate() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = standard_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::standard_rate() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.standard_rate)
  return _internal_standard_rate();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_standard_rate(
    ::i18n::phonenumbers::PhoneNumberDesc* standard_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standard_rate_);
  }
  standard_rate_ = standard_rate;
  if (standard_rate) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.standard_rate)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_standard_rate() {
  _has_bits_[0] &= ~0x00400000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = standard_rate_;
  standard_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_standard_rate() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.standard_rate)
  _has_bits_[0] &= ~0x00400000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = standard_rate_;
  standard_rate_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_standard_rate() {
  _has_bits_[0] |= 0x00400000u;
  if (standard_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    standard_rate_ = p;
  }
  return standard_rate_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_standard_rate() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_standard_rate();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.standard_rate)
  return _msg;
}
inline void PhoneMetadata::set_allocated_standard_rate(::i18n::phonenumbers::PhoneNumberDesc* standard_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete standard_rate_;
  }
  if (standard_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(standard_rate);
    if (message_arena != submessage_arena) {
      standard_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standard_rate, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  standard_rate_ = standard_rate;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.standard_rate)
}

// optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
inline bool PhoneMetadata::_internal_has_carrier_specific() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || carrier_specific_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_carrier_specific() const {
  return _internal_has_carrier_specific();
}
inline void PhoneMetadata::clear_carrier_specific() {
  if (carrier_specific_ != nullptr) carrier_specific_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_carrier_specific() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = carrier_specific_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::carrier_specific() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.carrier_specific)
  return _internal_carrier_specific();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_carrier_specific(
    ::i18n::phonenumbers::PhoneNumberDesc* carrier_specific) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carrier_specific_);
  }
  carrier_specific_ = carrier_specific;
  if (carrier_specific) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.carrier_specific)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_carrier_specific() {
  _has_bits_[0] &= ~0x00800000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = carrier_specific_;
  carrier_specific_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_carrier_specific() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.carrier_specific)
  _has_bits_[0] &= ~0x00800000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = carrier_specific_;
  carrier_specific_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_carrier_specific() {
  _has_bits_[0] |= 0x00800000u;
  if (carrier_specific_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    carrier_specific_ = p;
  }
  return carrier_specific_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_carrier_specific() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_carrier_specific();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.carrier_specific)
  return _msg;
}
inline void PhoneMetadata::set_allocated_carrier_specific(::i18n::phonenumbers::PhoneNumberDesc* carrier_specific) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete carrier_specific_;
  }
  if (carrier_specific) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(carrier_specific);
    if (message_arena != submessage_arena) {
      carrier_specific = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carrier_specific, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  carrier_specific_ = carrier_specific;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.carrier_specific)
}

// optional .i18n.phonenumbers.PhoneNumberDesc sms_services = 33;
inline bool PhoneMetadata::_internal_has_sms_services() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || sms_services_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_sms_services() const {
  return _internal_has_sms_services();
}
inline void PhoneMetadata::clear_sms_services() {
  if (sms_services_ != nullptr) sms_services_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_sms_services() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = sms_services_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::sms_services() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.sms_services)
  return _internal_sms_services();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_sms_services(
    ::i18n::phonenumbers::PhoneNumberDesc* sms_services) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sms_services_);
  }
  sms_services_ = sms_services;
  if (sms_services) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.sms_services)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_sms_services() {
  _has_bits_[0] &= ~0x01000000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = sms_services_;
  sms_services_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_sms_services() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.sms_services)
  _has_bits_[0] &= ~0x01000000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = sms_services_;
  sms_services_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_sms_services() {
  _has_bits_[0] |= 0x01000000u;
  if (sms_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    sms_services_ = p;
  }
  return sms_services_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_sms_services() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_sms_services();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.sms_services)
  return _msg;
}
inline void PhoneMetadata::set_allocated_sms_services(::i18n::phonenumbers::PhoneNumberDesc* sms_services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sms_services_;
  }
  if (sms_services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(sms_services);
    if (message_arena != submessage_arena) {
      sms_services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms_services, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  sms_services_ = sms_services;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.sms_services)
}

// optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
inline bool PhoneMetadata::_internal_has_no_international_dialling() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || no_international_dialling_ != nullptr);
  return value;
}
inline bool PhoneMetadata::has_no_international_dialling() const {
  return _internal_has_no_international_dialling();
}
inline void PhoneMetadata::clear_no_international_dialling() {
  if (no_international_dialling_ != nullptr) no_international_dialling_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::_internal_no_international_dialling() const {
  const ::i18n::phonenumbers::PhoneNumberDesc* p = no_international_dialling_;
  return p != nullptr ? *p : reinterpret_cast<const ::i18n::phonenumbers::PhoneNumberDesc&>(
      ::i18n::phonenumbers::_PhoneNumberDesc_default_instance_);
}
inline const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::no_international_dialling() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
  return _internal_no_international_dialling();
}
inline void PhoneMetadata::unsafe_arena_set_allocated_no_international_dialling(
    ::i18n::phonenumbers::PhoneNumberDesc* no_international_dialling) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_international_dialling_);
  }
  no_international_dialling_ = no_international_dialling;
  if (no_international_dialling) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_no_international_dialling() {
  _has_bits_[0] &= ~0x00020000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = no_international_dialling_;
  no_international_dialling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::unsafe_arena_release_no_international_dialling() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
  _has_bits_[0] &= ~0x00020000u;
  ::i18n::phonenumbers::PhoneNumberDesc* temp = no_international_dialling_;
  no_international_dialling_ = nullptr;
  return temp;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::_internal_mutable_no_international_dialling() {
  _has_bits_[0] |= 0x00020000u;
  if (no_international_dialling_ == nullptr) {
    auto* p = CreateMaybeMessage<::i18n::phonenumbers::PhoneNumberDesc>(GetArenaForAllocation());
    no_international_dialling_ = p;
  }
  return no_international_dialling_;
}
inline ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_no_international_dialling() {
  ::i18n::phonenumbers::PhoneNumberDesc* _msg = _internal_mutable_no_international_dialling();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
  return _msg;
}
inline void PhoneMetadata::set_allocated_no_international_dialling(::i18n::phonenumbers::PhoneNumberDesc* no_international_dialling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete no_international_dialling_;
  }
  if (no_international_dialling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::i18n::phonenumbers::PhoneNumberDesc>::GetOwningArena(no_international_dialling);
    if (message_arena != submessage_arena) {
      no_international_dialling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_international_dialling, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  no_international_dialling_ = no_international_dialling;
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
}

// required string id = 9;
inline bool PhoneMetadata::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PhoneMetadata::has_id() const {
  return _internal_has_id();
}
inline void PhoneMetadata::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneMetadata::id() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneMetadata::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.id)
}
inline std::string* PhoneMetadata::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.id)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_id() const {
  return id_.Get();
}
inline void PhoneMetadata::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::release_id() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneMetadata::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.id)
}

// optional int32 country_code = 10;
inline bool PhoneMetadata::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool PhoneMetadata::has_country_code() const {
  return _internal_has_country_code();
}
inline void PhoneMetadata::clear_country_code() {
  country_code_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhoneMetadata::_internal_country_code() const {
  return country_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhoneMetadata::country_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.country_code)
  return _internal_country_code();
}
inline void PhoneMetadata::_internal_set_country_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  country_code_ = value;
}
inline void PhoneMetadata::set_country_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.country_code)
}

// optional string international_prefix = 11;
inline bool PhoneMetadata::_internal_has_international_prefix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PhoneMetadata::has_international_prefix() const {
  return _internal_has_international_prefix();
}
inline void PhoneMetadata::clear_international_prefix() {
  international_prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PhoneMetadata::international_prefix() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.international_prefix)
  return _internal_international_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneMetadata::set_international_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 international_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.international_prefix)
}
inline std::string* PhoneMetadata::mutable_international_prefix() {
  std::string* _s = _internal_mutable_international_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.international_prefix)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_international_prefix() const {
  return international_prefix_.Get();
}
inline void PhoneMetadata::_internal_set_international_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  international_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::_internal_mutable_international_prefix() {
  _has_bits_[0] |= 0x00000002u;
  return international_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::release_international_prefix() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.international_prefix)
  if (!_internal_has_international_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return international_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneMetadata::set_allocated_international_prefix(std::string* international_prefix) {
  if (international_prefix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  international_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), international_prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.international_prefix)
}

// optional string preferred_international_prefix = 17;
inline bool PhoneMetadata::_internal_has_preferred_international_prefix() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PhoneMetadata::has_preferred_international_prefix() const {
  return _internal_has_preferred_international_prefix();
}
inline void PhoneMetadata::clear_preferred_international_prefix() {
  preferred_international_prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PhoneMetadata::preferred_international_prefix() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
  return _internal_preferred_international_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneMetadata::set_preferred_international_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 preferred_international_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
}
inline std::string* PhoneMetadata::mutable_preferred_international_prefix() {
  std::string* _s = _internal_mutable_preferred_international_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_preferred_international_prefix() const {
  return preferred_international_prefix_.Get();
}
inline void PhoneMetadata::_internal_set_preferred_international_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  preferred_international_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::_internal_mutable_preferred_international_prefix() {
  _has_bits_[0] |= 0x00000040u;
  return preferred_international_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::release_preferred_international_prefix() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
  if (!_internal_has_preferred_international_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return preferred_international_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneMetadata::set_allocated_preferred_international_prefix(std::string* preferred_international_prefix) {
  if (preferred_international_prefix != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  preferred_international_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preferred_international_prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
}

// optional string national_prefix = 12;
inline bool PhoneMetadata::_internal_has_national_prefix() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PhoneMetadata::has_national_prefix() const {
  return _internal_has_national_prefix();
}
inline void PhoneMetadata::clear_national_prefix() {
  national_prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PhoneMetadata::national_prefix() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix)
  return _internal_national_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneMetadata::set_national_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 national_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix)
}
inline std::string* PhoneMetadata::mutable_national_prefix() {
  std::string* _s = _internal_mutable_national_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_national_prefix() const {
  return national_prefix_.Get();
}
inline void PhoneMetadata::_internal_set_national_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  national_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::_internal_mutable_national_prefix() {
  _has_bits_[0] |= 0x00000004u;
  return national_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::release_national_prefix() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix)
  if (!_internal_has_national_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return national_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneMetadata::set_allocated_national_prefix(std::string* national_prefix) {
  if (national_prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  national_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), national_prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix)
}

// optional string preferred_extn_prefix = 13;
inline bool PhoneMetadata::_internal_has_preferred_extn_prefix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PhoneMetadata::has_preferred_extn_prefix() const {
  return _internal_has_preferred_extn_prefix();
}
inline void PhoneMetadata::clear_preferred_extn_prefix() {
  preferred_extn_prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PhoneMetadata::preferred_extn_prefix() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
  return _internal_preferred_extn_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneMetadata::set_preferred_extn_prefix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 preferred_extn_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
}
inline std::string* PhoneMetadata::mutable_preferred_extn_prefix() {
  std::string* _s = _internal_mutable_preferred_extn_prefix();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_preferred_extn_prefix() const {
  return preferred_extn_prefix_.Get();
}
inline void PhoneMetadata::_internal_set_preferred_extn_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  preferred_extn_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::_internal_mutable_preferred_extn_prefix() {
  _has_bits_[0] |= 0x00000008u;
  return preferred_extn_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::release_preferred_extn_prefix() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
  if (!_internal_has_preferred_extn_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return preferred_extn_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneMetadata::set_allocated_preferred_extn_prefix(std::string* preferred_extn_prefix) {
  if (preferred_extn_prefix != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  preferred_extn_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preferred_extn_prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
}

// optional string national_prefix_for_parsing = 15;
inline bool PhoneMetadata::_internal_has_national_prefix_for_parsing() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PhoneMetadata::has_national_prefix_for_parsing() const {
  return _internal_has_national_prefix_for_parsing();
}
inline void PhoneMetadata::clear_national_prefix_for_parsing() {
  national_prefix_for_parsing_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PhoneMetadata::national_prefix_for_parsing() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
  return _internal_national_prefix_for_parsing();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneMetadata::set_national_prefix_for_parsing(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 national_prefix_for_parsing_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
}
inline std::string* PhoneMetadata::mutable_national_prefix_for_parsing() {
  std::string* _s = _internal_mutable_national_prefix_for_parsing();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_national_prefix_for_parsing() const {
  return national_prefix_for_parsing_.Get();
}
inline void PhoneMetadata::_internal_set_national_prefix_for_parsing(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  national_prefix_for_parsing_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::_internal_mutable_national_prefix_for_parsing() {
  _has_bits_[0] |= 0x00000010u;
  return national_prefix_for_parsing_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::release_national_prefix_for_parsing() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
  if (!_internal_has_national_prefix_for_parsing()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return national_prefix_for_parsing_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneMetadata::set_allocated_national_prefix_for_parsing(std::string* national_prefix_for_parsing) {
  if (national_prefix_for_parsing != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  national_prefix_for_parsing_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), national_prefix_for_parsing,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
}

// optional string national_prefix_transform_rule = 16;
inline bool PhoneMetadata::_internal_has_national_prefix_transform_rule() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PhoneMetadata::has_national_prefix_transform_rule() const {
  return _internal_has_national_prefix_transform_rule();
}
inline void PhoneMetadata::clear_national_prefix_transform_rule() {
  national_prefix_transform_rule_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PhoneMetadata::national_prefix_transform_rule() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
  return _internal_national_prefix_transform_rule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneMetadata::set_national_prefix_transform_rule(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 national_prefix_transform_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
}
inline std::string* PhoneMetadata::mutable_national_prefix_transform_rule() {
  std::string* _s = _internal_mutable_national_prefix_transform_rule();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_national_prefix_transform_rule() const {
  return national_prefix_transform_rule_.Get();
}
inline void PhoneMetadata::_internal_set_national_prefix_transform_rule(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  national_prefix_transform_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::_internal_mutable_national_prefix_transform_rule() {
  _has_bits_[0] |= 0x00000020u;
  return national_prefix_transform_rule_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::release_national_prefix_transform_rule() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
  if (!_internal_has_national_prefix_transform_rule()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return national_prefix_transform_rule_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneMetadata::set_allocated_national_prefix_transform_rule(std::string* national_prefix_transform_rule) {
  if (national_prefix_transform_rule != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  national_prefix_transform_rule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), national_prefix_transform_rule,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
}

// optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
inline bool PhoneMetadata::_internal_has_same_mobile_and_fixed_line_pattern() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool PhoneMetadata::has_same_mobile_and_fixed_line_pattern() const {
  return _internal_has_same_mobile_and_fixed_line_pattern();
}
inline void PhoneMetadata::clear_same_mobile_and_fixed_line_pattern() {
  same_mobile_and_fixed_line_pattern_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool PhoneMetadata::_internal_same_mobile_and_fixed_line_pattern() const {
  return same_mobile_and_fixed_line_pattern_;
}
inline bool PhoneMetadata::same_mobile_and_fixed_line_pattern() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.same_mobile_and_fixed_line_pattern)
  return _internal_same_mobile_and_fixed_line_pattern();
}
inline void PhoneMetadata::_internal_set_same_mobile_and_fixed_line_pattern(bool value) {
  _has_bits_[0] |= 0x04000000u;
  same_mobile_and_fixed_line_pattern_ = value;
}
inline void PhoneMetadata::set_same_mobile_and_fixed_line_pattern(bool value) {
  _internal_set_same_mobile_and_fixed_line_pattern(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.same_mobile_and_fixed_line_pattern)
}

// repeated .i18n.phonenumbers.NumberFormat number_format = 19;
inline int PhoneMetadata::_internal_number_format_size() const {
  return number_format_.size();
}
inline int PhoneMetadata::number_format_size() const {
  return _internal_number_format_size();
}
inline void PhoneMetadata::clear_number_format() {
  number_format_.Clear();
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::mutable_number_format(int index) {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.number_format)
  return number_format_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >*
PhoneMetadata::mutable_number_format() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadata.number_format)
  return &number_format_;
}
inline const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::_internal_number_format(int index) const {
  return number_format_.Get(index);
}
inline const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::number_format(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.number_format)
  return _internal_number_format(index);
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::_internal_add_number_format() {
  return number_format_.Add();
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::add_number_format() {
  ::i18n::phonenumbers::NumberFormat* _add = _internal_add_number_format();
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadata.number_format)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >&
PhoneMetadata::number_format() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadata.number_format)
  return number_format_;
}

// repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
inline int PhoneMetadata::_internal_intl_number_format_size() const {
  return intl_number_format_.size();
}
inline int PhoneMetadata::intl_number_format_size() const {
  return _internal_intl_number_format_size();
}
inline void PhoneMetadata::clear_intl_number_format() {
  intl_number_format_.Clear();
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::mutable_intl_number_format(int index) {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return intl_number_format_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >*
PhoneMetadata::mutable_intl_number_format() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return &intl_number_format_;
}
inline const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::_internal_intl_number_format(int index) const {
  return intl_number_format_.Get(index);
}
inline const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::intl_number_format(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return _internal_intl_number_format(index);
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::_internal_add_intl_number_format() {
  return intl_number_format_.Add();
}
inline ::i18n::phonenumbers::NumberFormat* PhoneMetadata::add_intl_number_format() {
  ::i18n::phonenumbers::NumberFormat* _add = _internal_add_intl_number_format();
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::NumberFormat >&
PhoneMetadata::intl_number_format() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadata.intl_number_format)
  return intl_number_format_;
}

// optional bool main_country_for_code = 22 [default = false];
inline bool PhoneMetadata::_internal_has_main_country_for_code() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool PhoneMetadata::has_main_country_for_code() const {
  return _internal_has_main_country_for_code();
}
inline void PhoneMetadata::clear_main_country_for_code() {
  main_country_for_code_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool PhoneMetadata::_internal_main_country_for_code() const {
  return main_country_for_code_;
}
inline bool PhoneMetadata::main_country_for_code() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.main_country_for_code)
  return _internal_main_country_for_code();
}
inline void PhoneMetadata::_internal_set_main_country_for_code(bool value) {
  _has_bits_[0] |= 0x08000000u;
  main_country_for_code_ = value;
}
inline void PhoneMetadata::set_main_country_for_code(bool value) {
  _internal_set_main_country_for_code(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.main_country_for_code)
}

// optional string leading_digits = 23;
inline bool PhoneMetadata::_internal_has_leading_digits() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PhoneMetadata::has_leading_digits() const {
  return _internal_has_leading_digits();
}
inline void PhoneMetadata::clear_leading_digits() {
  leading_digits_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PhoneMetadata::leading_digits() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.leading_digits)
  return _internal_leading_digits();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PhoneMetadata::set_leading_digits(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 leading_digits_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.leading_digits)
}
inline std::string* PhoneMetadata::mutable_leading_digits() {
  std::string* _s = _internal_mutable_leading_digits();
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.leading_digits)
  return _s;
}
inline const std::string& PhoneMetadata::_internal_leading_digits() const {
  return leading_digits_.Get();
}
inline void PhoneMetadata::_internal_set_leading_digits(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  leading_digits_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::_internal_mutable_leading_digits() {
  _has_bits_[0] |= 0x00000080u;
  return leading_digits_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PhoneMetadata::release_leading_digits() {
  // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.leading_digits)
  if (!_internal_has_leading_digits()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return leading_digits_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PhoneMetadata::set_allocated_leading_digits(std::string* leading_digits) {
  if (leading_digits != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  leading_digits_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leading_digits,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.leading_digits)
}

// optional bool leading_zero_possible = 26 [default = false];
inline bool PhoneMetadata::_internal_has_leading_zero_possible() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool PhoneMetadata::has_leading_zero_possible() const {
  return _internal_has_leading_zero_possible();
}
inline void PhoneMetadata::clear_leading_zero_possible() {
  leading_zero_possible_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool PhoneMetadata::_internal_leading_zero_possible() const {
  return leading_zero_possible_;
}
inline bool PhoneMetadata::leading_zero_possible() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.leading_zero_possible)
  return _internal_leading_zero_possible();
}
inline void PhoneMetadata::_internal_set_leading_zero_possible(bool value) {
  _has_bits_[0] |= 0x10000000u;
  leading_zero_possible_ = value;
}
inline void PhoneMetadata::set_leading_zero_possible(bool value) {
  _internal_set_leading_zero_possible(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.leading_zero_possible)
}

// optional bool mobile_number_portable_region = 32 [default = false];
inline bool PhoneMetadata::_internal_has_mobile_number_portable_region() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool PhoneMetadata::has_mobile_number_portable_region() const {
  return _internal_has_mobile_number_portable_region();
}
inline void PhoneMetadata::clear_mobile_number_portable_region() {
  mobile_number_portable_region_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool PhoneMetadata::_internal_mobile_number_portable_region() const {
  return mobile_number_portable_region_;
}
inline bool PhoneMetadata::mobile_number_portable_region() const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.mobile_number_portable_region)
  return _internal_mobile_number_portable_region();
}
inline void PhoneMetadata::_internal_set_mobile_number_portable_region(bool value) {
  _has_bits_[0] |= 0x20000000u;
  mobile_number_portable_region_ = value;
}
inline void PhoneMetadata::set_mobile_number_portable_region(bool value) {
  _internal_set_mobile_number_portable_region(value);
  // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.mobile_number_portable_region)
}

// -------------------------------------------------------------------

// PhoneMetadataCollection

// repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
inline int PhoneMetadataCollection::_internal_metadata_size() const {
  return metadata_.size();
}
inline int PhoneMetadataCollection::metadata_size() const {
  return _internal_metadata_size();
}
inline void PhoneMetadataCollection::clear_metadata() {
  metadata_.Clear();
}
inline ::i18n::phonenumbers::PhoneMetadata* PhoneMetadataCollection::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata >*
PhoneMetadataCollection::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return &metadata_;
}
inline const ::i18n::phonenumbers::PhoneMetadata& PhoneMetadataCollection::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::i18n::phonenumbers::PhoneMetadata& PhoneMetadataCollection::metadata(int index) const {
  // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return _internal_metadata(index);
}
inline ::i18n::phonenumbers::PhoneMetadata* PhoneMetadataCollection::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::i18n::phonenumbers::PhoneMetadata* PhoneMetadataCollection::add_metadata() {
  ::i18n::phonenumbers::PhoneMetadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::i18n::phonenumbers::PhoneMetadata >&
PhoneMetadataCollection::metadata() const {
  // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadataCollection.metadata)
  return metadata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace phonenumbers
}  // namespace i18n

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_phonemetadata_2eproto
